---
# - name: Print return information from the previous task
#   ansible.builtin.debug:
#     var: hostvars
#   when: inventory_hostname in groups['master']

- name: Include kubernetes vars
  ansible.builtin.include_vars:
    file: vars.yml
    name: k8s_var

- name: CRI-O Repo
  ansible.builtin.copy:
    src: cri-o.repo
    dest: /etc/yum.repos.d/devel_cri_1.24.repo
    owner: root
    group: root
    mode: '0644'

- name: Kubernetes Repo
  ansible.builtin.copy:
    src: kubernetes.repo
    dest: /etc/yum.repos.d/kubernetes.repo
    owner: root
    group: root
    mode: '0644'

- name: Ensure Kubernetes is installed
  ansible.builtin.dnf:
    name: kubelet
    state: latest
    disable_excludes: kubernetes
    nobest: true

- name: Ensure K8s packages installed
  ansible.builtin.dnf:
    name: "{{ item }}"
    state: latest
    disable_excludes: kubernetes
  with_items:
    - kubeadm
    - kubectl
    - cri-o
    - nfs-utils

- name: Ensure K8s services are started
  ansible.builtin.service:
    name: "{{ item }}"
    enabled: true
    state: started
  with_items:
    - kubelet
    - crio
    - cri-o

- name: Local data for Sonaar & Radaar
  ansible.builtin.include_tasks:
    file: local_backup.yml
  when: inventory_hostname == k8s_var['arr_host']

- name: Create containers folder
  ansible.builtin.file:
    path: /etc/containers/
    state: directory

- name: Containers Policy for RHEL 9
  ansible.builtin.copy:
    src: policy.json
    dest: /etc/containers/policy.json
    owner: root
    group: root
    mode: '0644'

- name: Check if swap enabled
  changed_when: false
  ansible.builtin.command: "awk '{ if (NR > 1) exit 1}' /proc/swaps"
  register: swap_enabled
  ignore_errors: true

- name: Disable swap if not disabled
  ansible.builtin.command: swapoff -a
  when: swap_enabled.rc != 0

- name: Remove swap from fstab
  ansible.builtin.lineinfile:
    path: "/etc/fstab"
    state: absent
    regexp: '\sswap\s'

- name: Check if ip_forward enabled
  changed_when: false
  ansible.builtin.command: "grep 1 /proc/sys/net/ipv4/ip_forward"
  register: ip_forward_enabled
  failed_when: ip_forward_enabled.rc >=2

- name: Enable ip_forward
  ansible.builtin.shell: "echo 1 > /proc/sys/net/ipv4/ip_forward"
  when: ip_forward_enabled.rc == 1

- name: Check if br_filter enabled
  changed_when: false
  ansible.builtin.command: "grep 1 /proc/sys/net/bridge/bridge-nf-call-iptables"
  register: br_filter_enabled
  failed_when: br_filter_enabled.rc > 2

- name: Enable br_filter
  ansible.builtin.command: "modprobe br_netfilter"
  when: br_filter_enabled.rc != 0

- name: Check if kubectl autocomple
  changed_when: false
  ansible.builtin.command: "test -f /etc/bash_completion.d/kubectl"
  register: kubectl_autocomplete_enabled
  failed_when: kubectl_autocomplete_enabled.rc >=2

- name: Enable kubectl autocomplete
  ansible.builtin.shell: "kubectl completion bash | sudo tee /etc/bash_completion.d/kubectl > /dev/null"
  when: kubectl_autocomplete_enabled.rc == 1
  failed_when: kubectl_autocomplete_enabled.rc >=2

- name: Enable kubectl in user bashrc
  ansible.builtin.shell: |
    echo "source <(kubectl completion bash)" >> ~/.bashrc
  when: kubectl_autocomplete_enabled.rc == 1

- name: Test if joined to kubernetes cluster
  changed_when: false
  ansible.builtin.command: "test -f /etc/kubernetes/kubelet.conf"
  register: kubernetes_joined
  failed_when: kubernetes_joined.rc >=2

- name: Add KUBECONFIG to env
  ansible.builtin.lineinfile:
    path: "/root/.bashrc"
    regexp: '^export KUBECONFIG'
    line: "export KUBECONFIG=/etc/kubernetes/admin.conf"

- name: Create kubernetes cluster check
  ansible.builtin.shell: "kubectl get nodes | grep -i {{ ansible_facts['nodename'] }}"  
  register: create_cluster
  when: inventory_hostname in groups['master']
  ignore_errors: true

- name: Create kubernetes cluster
  ansible.builtin.command: "kubeadm init --pod-network-cidr 10.244.0.0/16 --token-ttl 0"
  when: inventory_hostname in groups['master'] and create_cluster.rc!=0
  register: kube_create_cluster_output

- name: Create kubernetes join command
  ansible.builtin.command: "kubeadm token create --print-join-command"
  register: kubernetes_join_command
  when: inventory_hostname in groups['master']

- name: Install git
  ansible.builtin.dnf:
    state: latest
    name: git
  when: inventory_hostname in groups['master']

- name: Print return information from the previous task
  ansible.builtin.debug:
    var: hostvars[groups['master'][0]]['kubernetes_join_command']
  when: inventory_hostname in groups['master']

- name: Join Kubernetes cluster
  ansible.builtin.command: "{{ hostvars[groups['master'][0]]['kubernetes_join_command']['stdout'] }}"
  when: kubernetes_joined.rc != 0 and inventory_hostname in groups['nodes']

- name: Git checkout
  ansible.builtin.git:
    repo: 'https://github.com/Jayden-Lind/LINDS-Kubernetes.git'
    dest: "{{ k8s_var.local_k8s_dir }}"
  when: inventory_hostname in groups['master']
  ignore_errors: true

- name: Copy LINDS secret
  ansible.builtin.copy:
    src: linds-secret.yml
    dest: "{{ k8s_var.local_k8s_dir }}linds-secret.yml"
    owner: root
    group: root
    mode: '0600'
    decrypt: yes
  when: inventory_hostname in groups['master']

- name: Configure git
  community.general.git_config:
    name: user.email
    scope: global
    value: jaydenlind@gmail.com
  when: inventory_hostname in groups['master']

- name: Configure git
  community.general.git_config:
    name: user.name
    scope: global
    value: Jayden Lind
  when: inventory_hostname in groups['master']

- name: Check if need to deploy manifests
  ansible.builtin.command: "cd {{ k8s_var.local_k8s_dir }} && ./app-deployment.sh"
  when: inventory_hostname in groups['master']
  ignore_errors: true