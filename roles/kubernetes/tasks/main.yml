---
- name: Include kubernetes vars
  ansible.builtin.include_vars:
    file: vars.yml
    name: k8s_var

- name: CRI-O Repo
  ansible.builtin.copy:
    src: cri-o.repo
    dest: /etc/yum.repos.d/devel_cri_1.24.repo
    owner: root
    group: root
    mode: "0644"
  when: ansible_facts['os_family'] == "RedHat"

- name: Kubernetes Repo
  ansible.builtin.copy:
    src: kubernetes.repo
    dest: /etc/yum.repos.d/kubernetes.repo
    owner: root
    group: root
    mode: "0644"
  when: ansible_facts['os_family'] == "RedHat"

- name: Add Kubernetes apt-key
  ansible.builtin.apt_key:
    url: https://pkgs.k8s.io/core:/stable:/v1.31/deb/Release.key
    state: present
    keyring: /etc/apt/keyrings/kubernetes-apt-keyring.gpg
  when: ansible_facts['os_family'] == "Debian"

- name: Add cri-o apt-key
  ansible.builtin.apt_key:
    url: https://pkgs.k8s.io/addons:/cri-o:/stable:/v1.30/deb/Release.key
    state: present
    keyring: /etc/apt/keyrings/cri-o-apt-keyring.gpg
  when: ansible_facts['os_family'] == "Debian"

- name: Add cro-i repository
  ansible.builtin.apt_repository:
    repo: deb [signed-by=/etc/apt/keyrings/cri-o-apt-keyring.gpg] https://pkgs.k8s.io/addons:/cri-o:/stable:/v1.30/deb/ /
    state: present
  when: ansible_facts['os_family'] == "Debian"

- name: Add Kubernetes repository
  ansible.builtin.apt_repository:
    repo: deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.gpg] https://pkgs.k8s.io/core:/stable:/v1.31/deb/ /
    state: present
  when: ansible_facts['os_family'] == "Debian"

- name: Ensure Kubernetes is installed (RedHat)
  ansible.builtin.dnf:
    name: kubelet
    state: latest
    disable_excludes: all
    nobest: true
  when: ansible_facts['os_family'] == "RedHat"

- name: Ensure K8s packages installed (RedHat)
  ansible.builtin.dnf:
    name: "{{ item }}"
    state: latest
    disable_excludes: all
  with_items:
    - kubeadm
    - kubectl
    - cri-o
    - nfs-utils
  when: ansible_facts['os_family'] == "RedHat"

- name: Ensure K8s packages installed (Debian)
  ansible.builtin.apt:
    name: "{{ item }}"
    state: present
    update_cache: true
  with_items:
    - kubelet
    - kubeadm
    - kubectl
    - cri-o
    - nfs-common
  when: ansible_facts['os_family'] == "Debian"

- name: Ensure K8s services are started (Debian)
  ansible.builtin.service:
    name: "{{ item }}"
    enabled: true
    state: started
  with_items:
    - kubelet
    - cri-o
  when: ansible_facts['os_family'] == "Debian"

- name: Ensure K8s services are started (RedHat)
  ansible.builtin.service:
    name: "{{ item }}"
    enabled: true
    state: started
  with_items:
    - kubelet
    - crio
    - cri-o
  when: ansible_facts['os_family'] == "RedHat"

- name: Local data for Sonaar & Radaar
  ansible.builtin.include_tasks:
    file: local_backup.yml
  when: inventory_hostname == k8s_var['arr_host']

- name: Create containers folder
  ansible.builtin.file:
    path: /etc/containers/
    state: directory

- name: Containers Policy for RHEL 9
  ansible.builtin.copy:
    src: policy.json
    dest: /etc/containers/policy.json
    owner: root
    group: root
    mode: "0644"
  when: ansible_facts['os_family'] == "RedHat"

- name: Check if swap enabled
  changed_when: false
  ansible.builtin.command: awk '{ if (NR > 1) exit 1}' /proc/swaps
  register: swap_enabled
  ignore_errors: true

- name: Disable swap if not disabled
  ansible.builtin.command: swapoff -a
  when: swap_enabled.rc != 0

- name: Remove swap from fstab
  ansible.builtin.lineinfile:
    path: /etc/fstab
    state: absent
    regexp: \sswap\s

- name: Check if ip_forward enabled
  changed_when: false
  ansible.builtin.command: grep 1 /proc/sys/net/ipv4/ip_forward
  register: ip_forward_enabled
  failed_when: ip_forward_enabled.rc >=2

- name: Enable ip_forward
  ansible.builtin.shell: echo 1 > /proc/sys/net/ipv4/ip_forward
  when: ip_forward_enabled.rc == 1

- name: Check if br_filter enabled
  changed_when: false
  ansible.builtin.command: grep 1 /proc/sys/net/bridge/bridge-nf-call-iptables
  register: br_filter_enabled
  failed_when: br_filter_enabled.rc > 2

- name: Enable br_filter
  ansible.builtin.command: modprobe br_netfilter
  when: br_filter_enabled.rc != 0

- name: Check if kubectl autocomple
  changed_when: false
  ansible.builtin.command: test -f /etc/bash_completion.d/kubectl
  register: kubectl_autocomplete_enabled
  failed_when: kubectl_autocomplete_enabled.rc >=2

- name: Enable kubectl autocomplete
  ansible.builtin.shell: kubectl completion bash | sudo tee /etc/bash_completion.d/kubectl > /dev/null
  when: kubectl_autocomplete_enabled.rc == 1
  failed_when: kubectl_autocomplete_enabled.rc >=2

- name: Enable kubectl in user bashrc
  ansible.builtin.shell: |
    echo "source <(kubectl completion bash)" >> ~/.bashrc
  when: kubectl_autocomplete_enabled.rc == 1

- name: Test if joined to kubernetes cluster
  changed_when: false
  ansible.builtin.command: test -f /etc/kubernetes/kubelet.conf
  register: kubernetes_joined
  failed_when: kubernetes_joined.rc >=2

- name: Add KUBECONFIG to env
  ansible.builtin.lineinfile:
    path: /root/.bashrc
    regexp: ^export KUBECONFIG
    line: export KUBECONFIG=/etc/kubernetes/admin.conf

- name: Create kubernetes cluster check
  ansible.builtin.shell: export KUBECONFIG=/etc/kubernetes/admin.conf; kubectl get nodes | grep -i {{ ansible_facts['nodename'] }}
  register: create_cluster
  when: inventory_hostname in groups['master']
  ignore_errors: true
  become_user: root

- name: Create kubernetes cluster
  ansible.builtin.command: kubeadm init --pod-network-cidr 10.244.0.0/16 --token-ttl 0
  when: inventory_hostname in groups['master'] and create_cluster.rc!=0
  register: kube_create_cluster_output

- name: Create kubernetes join command
  ansible.builtin.command: kubeadm token create --print-join-command
  register: kubernetes_join_command
  when: inventory_hostname in groups['master']

- name: Install git
  ansible.builtin.dnf:
    state: latest
    name: git
  when: (inventory_hostname in groups['master']) and (ansible_facts['os_family'] == "RedHat")
  ignore_errors: true

- name: Print return information from the previous task
  ansible.builtin.debug:
    var: hostvars[groups['master'][0]]['kubernetes_join_command']
  when: inventory_hostname in groups['master']

- name: Join Kubernetes cluster
  ansible.builtin.command: "{{ hostvars[groups['master'][0]]['kubernetes_join_command']['stdout'] }}"
  when:
    - kubernetes_joined.rc != 0
    - inventory_hostname not in groups['master']

- name: Cleanup old unused images
  ansible.builtin.cron:
    name: Cleanup old images
    special_time: weekly
    job: crictl rmi --prune

- name: Local data for Sonaar & Radaar
  ansible.builtin.include_tasks:
    file: local_backup.yml
  when: inventory_hostname in groups['linds_master']

- name: Setup Master
  ansible.builtin.include_tasks:
    file: master.yml
  when: inventory_hostname in groups['master']
